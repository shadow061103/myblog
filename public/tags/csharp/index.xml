<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Csharp on Steve的技術筆記</title>
    <link>https://shadow061103.github.io/tags/csharp/</link>
    <description>Recent content in Csharp on Steve的技術筆記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Thu, 20 Oct 2022 17:06:27 +0800</lastBuildDate><atom:link href="https://shadow061103.github.io/tags/csharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AutomapperResolver無法用建構式注入解法</title>
      <link>https://shadow061103.github.io/posts/202210/automapperresolver%E7%84%A1%E6%B3%95%E7%94%A8%E5%BB%BA%E6%A7%8B%E5%BC%8F%E6%B3%A8%E5%85%A5%E8%A7%A3%E6%B3%95/</link>
      <pubDate>Thu, 20 Oct 2022 17:06:27 +0800</pubDate>
      
      <guid>https://shadow061103.github.io/posts/202210/automapperresolver%E7%84%A1%E6%B3%95%E7%94%A8%E5%BB%BA%E6%A7%8B%E5%BC%8F%E6%B3%A8%E5%85%A5%E8%A7%A3%E6%B3%95/</guid>
      <description>Automapper Resolver無法用建構式注入解法 原本寫法 var mapperConfiguration = new MapperConfiguration(mapperConfig =&amp;gt; { mapperConfig.AddProfile&amp;lt;ControllerProfile&amp;gt;(); mapperConfig.AddProfile&amp;lt;ServiceProfile&amp;gt;(); }); services.AddSingleton(mapperConfiguration.CreateMapper()); 更新後寫法
services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies()); Resolver範例 public class CaseFromResolver : IValueResolver&amp;lt;CaseFromDataModel, CaseFromDto, string&amp;gt; { public IWebRentCaseSiteService _webRentCaseSiteService; public CaseFromResolver(IWebRentCaseSiteService webRentCaseSiteService) { _webRentCaseSiteService = webRentCaseSiteService; } public string Resolve(CaseFromDataModel source, CaseFromDto destination, string destMember, ResolutionContext context) { var dict = _webRentCaseSiteService.GetRentCaseSourceDictionary() .ConfigureAwait(false) .GetAwaiter() .GetResult(); return dict.ContainsKey(source.CaseFrom) ? dict[source.CaseFrom] : &amp;#34;&amp;#34;; } } </description>
    </item>
    
    <item>
      <title>取檔案路徑作法</title>
      <link>https://shadow061103.github.io/posts/202210/%E5%8F%96%E6%AA%94%E6%A1%88%E8%B7%AF%E5%BE%91%E4%BD%9C%E6%B3%95/</link>
      <pubDate>Thu, 20 Oct 2022 17:05:35 +0800</pubDate>
      
      <guid>https://shadow061103.github.io/posts/202210/%E5%8F%96%E6%AA%94%E6%A1%88%E8%B7%AF%E5%BE%91%E4%BD%9C%E6%B3%95/</guid>
      <description>C#取檔案路徑作法 AppDomain.CurrentDomain.BaseDirectory 執行的應用程式在哪裡 D:\CorporateProject\Yungching.Webservice.Rent\Yungching.Webservice.Rent\bin\Debug\netcoreapp3.1\
Assembly.GetExecutingAssembly().Location 目前執行的組件在哪裡 D:\CorporateProject\Yungching.Webservice.Rent\Yungching.Webservice.Rent\bin\Debug\netcoreapp3.1\Yungching.Webservice.Rent.Service.dll
Directory.GetCurrentDirectory() 在哪裡下執行指令 D:\CorporateProject\Yungching.Webservice.Rent\Yungching.Webservice.Rent
同第一種 var path = new Uri(Assembly.GetExecutingAssembly().CodeBase).AbsolutePath; var dir = Path.GetDirectoryName(path); </description>
    </item>
    
    <item>
      <title>測試Task.WhenAll執行緒</title>
      <link>https://shadow061103.github.io/posts/202210/%E6%B8%AC%E8%A9%A6task.whenall%E5%9F%B7%E8%A1%8C%E7%B7%92/</link>
      <pubDate>Thu, 20 Oct 2022 17:05:06 +0800</pubDate>
      
      <guid>https://shadow061103.github.io/posts/202210/%E6%B8%AC%E8%A9%A6task.whenall%E5%9F%B7%E8%A1%8C%E7%B7%92/</guid>
      <description>測試Task.WhenAll執行緒 async Task Main() { var tasks = new List&amp;lt;Task&amp;lt;string&amp;gt;&amp;gt;(); foreach (var i in Enumerable.Range(1, 30)) { var task = download(&amp;#34;https://www.cmoney.tw/finance/technicalanalysis.aspx?s=2399&amp;#34;,i); tasks.Add(task); } await Task.WhenAll(tasks); } async Task&amp;lt;string&amp;gt; download(string url,int id) { ($&amp;#34;{id}:1:{Thread.CurrentThread.ManagedThreadId}&amp;#34;).Dump(); var client=new WebClient(); ($&amp;#34;{id}:2:{Thread.CurrentThread.ManagedThreadId}&amp;#34;).Dump(); var task=client.DownloadStringTaskAsync(url); ($&amp;#34;{id}:3:{Thread.CurrentThread.ManagedThreadId}&amp;#34;).Dump(); string content=await task; ($&amp;#34;{id}:4:{Thread.CurrentThread.ManagedThreadId}&amp;#34;).Dump(); return content; } </description>
    </item>
    
    <item>
      <title>Csharp本事筆記</title>
      <link>https://shadow061103.github.io/posts/202210/csharp%E6%9C%AC%E4%BA%8B%E7%AD%86%E8%A8%98/</link>
      <pubDate>Thu, 20 Oct 2022 17:04:27 +0800</pubDate>
      
      <guid>https://shadow061103.github.io/posts/202210/csharp%E6%9C%AC%E4%BA%8B%E7%AD%86%E8%A8%98/</guid>
      <description>tags: C# Csharp本事筆記 共變性逆變性 無法在編譯時期抓出型別不相容的錯誤 泛型可以把小的型別當作大的來操作，但因為宣告是&amp;lt;out T&amp;gt;，所以只能用在輸出的場合 任何參考型別（reference type）的泛型串列，你都可以將它當作IEnumerable&amp;lt;object&amp;gt;的物件來操作 共變性:把較小型別指派給較大型別 逆變性:把較大型別指派給較小型別 List&amp;lt;string&amp;gt; stringList = new List&amp;lt;string&amp;gt;(); List&amp;lt;object&amp;gt; objectList = stringList; // 即使C# 4 也不能這樣寫! 但是可以 List&amp;lt;string&amp;gt; stringList = new List&amp;lt;string&amp;gt;(); IEnumerable&amp;lt;object&amp;gt; objects = stringList; IEnumerable&amp;lt;T&amp;gt;都是唯讀的，可以當作參數使用 nullable 只有實質型別可以用Nullable&amp;lt; T&amp;gt; int? x = null; int? y= x ?? 5; //等同於 int? y= =(x != null)? x : 5; 委派 可以在方法裡外包一個函式，方法在執行的時候可以回頭呼叫那個涵式
C#內建委派 Action&amp;lt;in T1, in T2, in T3&amp;gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4) 無回傳值 TResult Func&amp;lt;in T1, in T2, out TResult&amp;gt;(T1 arg1, T2 arg2); 有回傳值 事件 基於委派衍生出來的語法</description>
    </item>
    
    <item>
      <title>DI注入不同實體做法</title>
      <link>https://shadow061103.github.io/posts/202210/di%E6%B3%A8%E5%85%A5%E4%B8%8D%E5%90%8C%E5%AF%A6%E9%AB%94%E5%81%9A%E6%B3%95/</link>
      <pubDate>Thu, 20 Oct 2022 17:03:53 +0800</pubDate>
      
      <guid>https://shadow061103.github.io/posts/202210/di%E6%B3%A8%E5%85%A5%E4%B8%8D%E5%90%8C%E5%AF%A6%E9%AB%94%E5%81%9A%E6%B3%95/</guid>
      <description>.Net core DI注入不同實體做法 註冊DI使用Func 有兩個不同class都繼承IESCaseRepository 使用EnvTag做區別 services.AddScoped&amp;lt;ESCaseRepository&amp;gt;(); services.AddScoped&amp;lt;ESCaseCloudRepository&amp;gt;(); services.AddScoped&amp;lt;Func&amp;lt;EnvTag, IESCaseRepository&amp;gt;&amp;gt;(sp =&amp;gt; env =&amp;gt; { return env switch { EnvTag.Cloud =&amp;gt; sp.GetService&amp;lt;ESCaseCloudRepository&amp;gt;(), EnvTag.Local =&amp;gt; sp.GetService&amp;lt;ESCaseRepository&amp;gt;(), _ =&amp;gt; throw new Exception($&amp;#34;找不到 {EnvTag.Cloud}的注入設定，請在DI設定&amp;#34;) }; }); 使用時 記得宣告 private IESCaseRepository _esWebCaseRepository; private IESCaseRepository _esCloudWebCaseRepository; 在建構試寫Func&amp;lt;EnvTag, IESCaseRepository&amp;gt; resolver 使用時像這樣 _esWebCaseRepository = resolver(EnvTag.Local); _esCloudWebCaseRepository = resolver(EnvTag.Cloud); 兩個class邏輯一樣 只有差在裡面的建構式用不同實體 可以不用寫兩個class，只需要一個然後用func去指定實做就好 注入 ElasticClient是實作內容不一樣 services.AddScoped&amp;lt;Func&amp;lt;EnvTag, IESCaseRepository&amp;gt;&amp;gt;(sp =&amp;gt; env =&amp;gt; { var resolver = sp.GetService&amp;lt;Func&amp;lt;EnvTag, ElasticClient&amp;gt;&amp;gt;(); return new ESCaseRepository(env, resolver, sp.</description>
    </item>
    
    <item>
      <title>打包Nuget套件</title>
      <link>https://shadow061103.github.io/posts/202210/%E6%89%93%E5%8C%85nuget%E5%A5%97%E4%BB%B6/</link>
      <pubDate>Thu, 20 Oct 2022 17:03:25 +0800</pubDate>
      
      <guid>https://shadow061103.github.io/posts/202210/%E6%89%93%E5%8C%85nuget%E5%A5%97%E4%BB%B6/</guid>
      <description>打包Nuget套件 設定練習用套件來源 公司練習的位置是http://package.evertrust.com.tw/feeds/Exercise 開發環境設定 安裝node.js https://nodejs.org/en/ 下載安裝檔案 設定npm npm config set registry=&amp;quot;http://package.evertrust.com.tw/npm/registry npm config set strict-ssl=false 安裝nuget命令列 npm install nuget-cli -g 下載nuget.exe download 把nuget.exe.檔案路徑加到環境變數PATH，重開cmd就可以用了 使用NuGet Package Explorer製作套件 下載並開啟NuGet Package Explorer Create a new package 編輯Package metadata(id、version、description&amp;hellip;) &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&amp;lt;package xmlns=&amp;#34;http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd&amp;#34;&amp;gt;&amp;lt;metadata&amp;gt;&amp;lt;id&amp;gt;EvertrustStrongLibrary-g5341&amp;lt;/id&amp;gt;&amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;&amp;lt;title&amp;gt;EvertrustStrongLibrary-g5341&amp;lt;/title&amp;gt;&amp;lt;authors&amp;gt;G5341&amp;lt;/authors&amp;gt;&amp;lt;owners&amp;gt;Evertrust&amp;lt;/owners&amp;gt;&amp;lt;requireLicenseAcceptance&amp;gt;false&amp;lt;/requireLicenseAcceptance&amp;gt;&amp;lt;description&amp;gt;My package description.&amp;lt;/description&amp;gt;&amp;lt;/metadata&amp;gt;&amp;lt;/package&amp;gt; Add Lib Folder新增資料夾 因為專案版本是 .net standard所以增加一個netstandard2.0資料夾 把專案編譯好的dll放進netstandard2.0資料夾中 按儲存 檔名會是{Id}.{Version}.nupkg EvertrustStrongLibrary-g5341.1.0.0.nupkg 最後上傳package server 打開 http://package.evertrust.com.tw/feeds/Exercise add package 使用command製作套件 打開套件管理主控台或在專案目錄下打開cmd，把nuget更新到最新版本，下指令 nuget update -self 切到專案目錄下，建立nuspec nuget spec，再把檔案加到專案中，記得要先在專案裡面調整metadata不然NuGet Package Explorer打不開 使用Nuget Package Explorer編輯剛建好的nuspec 編輯Metadata 清除所有content 用save Matadata As存檔，檔名選原來那個覆蓋過去EvertrustStrongLibrary.</description>
    </item>
    
    <item>
      <title>OOP物件導向</title>
      <link>https://shadow061103.github.io/posts/202210/oop%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91/</link>
      <pubDate>Thu, 20 Oct 2022 17:02:58 +0800</pubDate>
      
      <guid>https://shadow061103.github.io/posts/202210/oop%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91/</guid>
      <description>C# OOP物件導向 三大特性 繼承 繼承者會擁有被繼承者的型別特徵
繼承一個上層類別 (只能一個) 實做介面 (可以多個) 封裝 隱藏不必要為外界所知的資訊 隱藏行為的變化 隔離出物件的內部與外部，就是定義「物件的邊界」，以及定義出「外部可視部分」 將外部使用端不需要瞭解的物件內部資訊給封裝起來，也就是「封裝物件的實作細節」 將物件內部的變化封裝起來，也就是「封裝變化」 多型 父類別指標指向子類別物件
廣義多型 (universal polymorphism) 繼承式多型 (inclusion):一般常見的 參數式多型 (parametric):以參數型式，讓類別可以達到動態變化的方法(EX 泛型) 特設多型 (ad hoc polymorphism) 多載 (overloading):表示使用同一個名稱但不同的參數清單，定義多個版本的程序 強制同型 (coercions):會用到boxing跟unboxing EX (int)num 型別 參考型別 變數內容則是儲存指向物件的參考(指標)，存在 Heap
介面 類別 委派 實質型別 變數內容就是物件本身，存在於 Stack 變數與物件是一對一的關係 一定會繼承 System.ValueType
結構 列舉 Boxing 與 UnBoxing 實質型別與參考型別之間的轉換 造成效能耗損 存取修飾字 private (預設) internal protected protected internal public 其他修飾字 abstract抽象 類別 : 表示抽象類別，不具有公開建構式 成員 : 表示為抽象成員，實做不完整，方法不提供實作， 非抽象衍生類別必須覆寫此方法，隱含virtual public abstract class Test { public abstract int Add(int a, int b); } public class Test1 : Test { public override int Add(int a, int b) { return a + b; } } sealed 類別 : 表示密封類別，此類別無法再被繼承 成員 : 當套用至成員時，sealed 修飾詞必須一律和override 搭配使用，其衍生類別將無法再覆寫此成員 virtual虛擬:允許在衍生類別中覆寫此成員，可以有實作 new遮蔽:明確隱藏繼承自基底類別的成員，或稱為遮蔽 override:覆寫基底類別的虛擬(virtual) 成員 被覆寫的基底方法必須是虛擬、抽象或覆寫的執行個體方法(不能靜態或非虛擬、密封方法) 實質型別傳值/址 傳值:取出變數複製一份到方法中，變數位址不同，變數是儲存內容值 傳址:方法參數要加上ref，變數位址相同 參考型別傳值/址 傳值:取出變數值傳遞到方法中，變數位址不同，只能改變原來傳進去變數的值，改變位址就不是原本變數 傳址:取出變數的位址傳給方法，變數是儲存位址，改變值或new一個會改變原本變數 多載 同樣的方法名稱,不同的參數清單</description>
    </item>
    
    <item>
      <title>ModelValidator驗證</title>
      <link>https://shadow061103.github.io/posts/202210/modelvalidator%E9%A9%97%E8%AD%89/</link>
      <pubDate>Thu, 20 Oct 2022 17:02:03 +0800</pubDate>
      
      <guid>https://shadow061103.github.io/posts/202210/modelvalidator%E9%A9%97%E8%AD%89/</guid>
      <description>ModelValidator驗證(service、repository) 可以在Service層或Repository層做參數驗證 會使用到System.ComponentModel.DataAnnotations 一樣在參數上掛驗證Attribute public class InputParameter { [Required] public int[] arr1 { get; set; } [Required] public int[] arr2 { get; set; } [StringLength(5)] public string IP { get; set; } } 驗證方法 public class ModelValidator { /// &amp;lt;summary&amp;gt; /// Validates the specified model. /// &amp;lt;/summary&amp;gt; /// &amp;lt;typeparam name=&amp;#34;T&amp;#34;&amp;gt;&amp;lt;/typeparam&amp;gt; /// &amp;lt;param name=&amp;#34;model&amp;#34;&amp;gt;The model.&amp;lt;/param&amp;gt; /// &amp;lt;param name=&amp;#34;parameterName&amp;#34;&amp;gt;parameterName&amp;lt;/param&amp;gt; /// &amp;lt;exception cref=&amp;#34;ArgumentException&amp;#34;&amp;gt;&amp;lt;/exception&amp;gt; public static void Validate&amp;lt;T&amp;gt;(T model, string parameterName) where T : class { if (model is null) { if (string.</description>
    </item>
    
    <item>
      <title>Messagepack</title>
      <link>https://shadow061103.github.io/posts/202210/messagepack/</link>
      <pubDate>Thu, 20 Oct 2022 17:01:33 +0800</pubDate>
      
      <guid>https://shadow061103.github.io/posts/202210/messagepack/</guid>
      <description>tags: C# MessagePack Nuget Install-Package MessagePack//分析器Install-Package MessagePackAnalyzer//擴展Install-Package MessagePack.ImmutableCollectionInstall-Package MessagePack.ReactivePropertyInstall-Package MessagePack.UnityShimsInstall-Package MessagePack.AspNetCoreMvcFormatter Class範例 class上要加上[MessagePackObject] 屬性加上[Key(0)]或`[Key&amp;quot;name&amp;quot;] [IgnoreMember]可以不序列化 作者建議Key使用int，因為會比較快，但是轉出的json不會有key name key建議不要跳數字，否則會出現[null,null,null,0,null,null,null,null,null,null,0] 序列化對象 可以是public class或struct 必須標記[MessagePackObject]跟[key] [MessagePackObject]可以用[DataContract]取代，[key(0)]可以用[DataMember(Order = 0)]或[DataMember(Name = string)]取代 [MessagePackObject] public class PackClass { // Key 是序列化索引，对于版本控制非常重要。 [Key(0)] public int Age { get; set; } [Key(1)] public string FirstName { get; set; } [Key(2)] public string LastName { get; set; } // 公共成员中不序列化目标，标记IgnoreMemberAttribute [IgnoreMember] public string FullName { get { return FirstName + LastName; } } } //結果 [99,&amp;#34;hoge&amp;#34;,&amp;#34;huga&amp;#34;] [MessagePackObject] public class Sample2 { [Key(&amp;#34;foo&amp;#34;)] public int Foo { get; set; } [Key(&amp;#34;bar&amp;#34;)] public int Bar { get; set; } } // 結果 {&amp;#34;foo&amp;#34;:123,&amp;#34;bar&amp;#34;:456} [DataContract] public class PackClass { [DataMember(Order = 0)] public int Age { get; set; } [DataMember(Order = 1)] public string FirstName { get; set; } [DataMember(Order = 2)] public string LastName { get; set; } [IgnoreDataMember] public string FullName { get { return FirstName + LastName; } } } 使用 // 序列化 var bytes = MessagePackSerializer.</description>
    </item>
    
    <item>
      <title>MediatR</title>
      <link>https://shadow061103.github.io/posts/202210/mediatr/</link>
      <pubDate>Thu, 20 Oct 2022 17:01:00 +0800</pubDate>
      
      <guid>https://shadow061103.github.io/posts/202210/mediatr/</guid>
      <description>MediatR 安裝套件 Install-Package MediatRInstall-Package MediatR.Extensions.Microsoft.DependencyInjection DI注入 public void ConfigureServices(IServiceCollection services){services.AddMediatR(Assembly.GetExecutingAssembly());//IRequestPreProcessor跟IRequestPostProcessor都不用再注入//但是IPipelineBehavior要} git
IRequestHandler IRequestHandler&amp;lt;in TRequest, TResponse&amp;gt; 如果是沒有回傳值TResponse可以放Unit IRequest可不放(不回傳)或寫要回傳的型別IRequest&amp;lt;T&amp;gt; 只能一對一執行handler INotificationHandler INotificationHandler&amp;lt;in TNotification, TResponse&amp;gt; T要繼承INotification，沒有回傳值 是一對多的事件(event) 要用publish通知執行動作 實作 看git比較快
Pipeline IRequestPreProcessor&amp;lt;TRequest&amp;gt;是在request之前執行 IRequestPostProcessor&amp;lt;TRequest, TResponse&amp;gt;是在request之後執行，所以可以拿到response IPipelineBehavior在執行方法前後執行 執行順序:IRequestPreProcessor&amp;gt;IPipelineBehavior&amp;gt;方法&amp;gt;IPipelineBehavior&amp;gt;IRequestPostProcessor </description>
    </item>
    
    <item>
      <title>背景執行工作</title>
      <link>https://shadow061103.github.io/posts/202210/%E8%83%8C%E6%99%AF%E5%9F%B7%E8%A1%8C%E5%B7%A5%E4%BD%9C/</link>
      <pubDate>Thu, 20 Oct 2022 16:59:46 +0800</pubDate>
      
      <guid>https://shadow061103.github.io/posts/202210/%E8%83%8C%E6%99%AF%E5%9F%B7%E8%A1%8C%E5%B7%A5%E4%BD%9C/</guid>
      <description>背景執行工作 要執行的工作繼承BackgroundService 實作Task ExecuteAsync(CancellationToken stoppingToken) 設定時間await Task.Delay(TimeSpan.FromSeconds(10), stoppingToken); StartUp.cs註冊 services.AddHostedService&amp;lt;CacheCheckService&amp;gt;(); 其他相關連有用到的都要改成Singleton，但也可以不用，需要使用IServiceScopeFactory public class CacheCheckService { //宣告 private readonly IServiceScopeFactory _serviceScopeFactory; public CacheCheckService(IServiceScopeFactory serviceScopeFactory) { _serviceScopeFactory = serviceScopeFactory; } //會用到的service private IChatNotifyService _notifyService; private IChatNotifyService NotifyService { get { if (this._notifyService != null) { return this._notifyService; } var scope = this._serviceScopeFactory.CreateScope(); var notifyService = scope.ServiceProvider.GetRequiredService&amp;lt;IChatNotifyService&amp;gt;(); this._notifyService = notifyService; return this._notifyService; } } } 微軟文件 在 ASP.NET Core 中使用託管服務的背景工作 在微服務中使用 IHostedService 和 BackgroundService 類別實作背景工作</description>
    </item>
    
    <item>
      <title>grpc使用http2_health_check問題</title>
      <link>https://shadow061103.github.io/posts/202210/grpc%E4%BD%BF%E7%94%A8http2_health_check%E5%95%8F%E9%A1%8C/</link>
      <pubDate>Thu, 20 Oct 2022 16:58:58 +0800</pubDate>
      
      <guid>https://shadow061103.github.io/posts/202210/grpc%E4%BD%BF%E7%94%A8http2_health_check%E5%95%8F%E9%A1%8C/</guid>
      <description>grpc使用http2 health check問題 grpc內appsetting設定 &amp;#34;Kestrel&amp;#34;: {&amp;#34;EndPoints&amp;#34;: {&amp;#34;Grpc&amp;#34;: {&amp;#34;Url&amp;#34;: &amp;#34;http://+:4270&amp;#34;,&amp;#34;Protocols&amp;#34;: &amp;#34;Http2&amp;#34;}}} http/2支援可以用http或https 但是因為瀏覽器的http/2只支援https 所以health check只能用https才連的到 可以用curl指令去打grpc的endpoint
curl 預設安裝git會安裝的版本，預設是不支援http/2的 路徑在C:\Program Files\Git\mingw64\bin
curl --http2 http://localhost:5000/health curl --http2-prior-knowledge -X GET http://192.168.249.122:7202/backend/health
要去這邊抓最新版本 https://curl.se/windows/ 然後解壓縮檔案，在/bin裡面有curl.exe檔案 把這路徑加到環境變數，再移到system32上面 新版的會支援http/2 https://stackoverflow.com/questions/51008686/whats-meaning-of-insecure-connection-in-grpc
信任憑證 dotnet dev-certs https --trust https://docs.microsoft.com/zh-tw/aspnet/core/security/enforcing-ssl?view=aspnetcore-6.0&amp;amp;tabs=visual-studio#trust-the-aspnet-core-https-development-certificate-on-windows-and-macos https://medium.com/%E7%A8%8B%E5%BC%8F%E8%A3%A1%E6%9C%89%E8%9F%B2/windows-%E4%B8%BB%E6%A9%9F%E5%A6%82%E4%BD%95%E5%95%9F%E7%94%A8-tls-1-2-d72825f791b9</description>
    </item>
    
    <item>
      <title>EFCore使用</title>
      <link>https://shadow061103.github.io/posts/202210/efcore%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 20 Oct 2022 16:55:56 +0800</pubDate>
      
      <guid>https://shadow061103.github.io/posts/202210/efcore%E4%BD%BF%E7%94%A8/</guid>
      <description>tags: C# EF Core使用 安裝 下載nuget clidotnet add package Microsoft.EntityFrameworkCore.SqlServer套件管理員主控台Install-Package Microsoft.EntityFrameworkCore.SqlServer 非必要 建資料庫 dotnet tool install --global dotnet-efdotnet add package Microsoft.EntityFrameworkCore.Designdotnet ef migrations add InitialCreatedotnet ef database update這邊用法//要指定資料夾dotnet ef migrations add addPayToken -o Infrastructure/Migrationsdotnet ef database update 這邊如果要新增database 需要先寫好entity跟context
產生Scriptdotnet ef migrations script --context FinancialContext 可以使用EF core power tool建立DBContext檔 使用 如果只要單一實例DBContext，可以在startUp做DI設定，使用時在建構子注入 public void ConfigureServices(IServiceCollection services) { services.AddControllers(); services.AddDbContext&amp;lt;ApplicationDbContext&amp;gt;( options =&amp;gt; options.</description>
    </item>
    
    <item>
      <title>FluentValidation作法</title>
      <link>https://shadow061103.github.io/posts/202210/fluentvalidation%E4%BD%9C%E6%B3%95/</link>
      <pubDate>Thu, 20 Oct 2022 16:55:10 +0800</pubDate>
      
      <guid>https://shadow061103.github.io/posts/202210/fluentvalidation%E4%BD%9C%E6%B3%95/</guid>
      <description>.Net Core FluentValidation作法 文件 安裝套件 Install-Package FluentValidation.AspNetCore startUp.cs設定 會去偵測組件所在位置所有繼承AbstractValidator的類別
services.AddControllers(options =&amp;gt;{ }).AddJsonOptions(options =&amp;gt; options.JsonSerializerOptions.Converters.Add(new JsonStringEnumConverter())).AddFluentValidation(fv =&amp;gt; fv.RegisterValidatorsFromAssemblyContaining&amp;lt;Startup&amp;gt;()); 參考這篇文章 後面需加上把model validator的驗證關掉
services.Configure&amp;lt;ApiBehaviorOptions&amp;gt;(options =&amp;gt;{options.SuppressModelStateInvalidFilter = true;}); 還有另一個解法是用stackoverflow的作法，但其實會有問題 踩到的雷是[FromBody]不會有問題，但用[HttppGet]打api還是會驗證 要依照連結的做法去調整
public class NullObjectModelValidator : IObjectModelValidator { public void Validate(ActionContext actionContext, ValidationStateDictionary validationState, string prefix, object model) { foreach (var entry in actionContext.ModelState.Values) { // or ModelValidationState.Valid entry.ValidationState = ModelValidationState.Skipped; } } } 寫Validator 原則上可以參考文件寫法，有很多客製跟條件寫法
public class AddMessageParameterValidator : AbstractValidator&amp;lt;AddMessageParameter&amp;gt;{public AddMessageParameterValidator(){RuleFor(c =&amp;gt; c.</description>
    </item>
    
    <item>
      <title>針對enum寫attribute並取值</title>
      <link>https://shadow061103.github.io/posts/202210/%E9%87%9D%E5%B0%8Denum%E5%AF%ABattribute%E4%B8%A6%E5%8F%96%E5%80%BC/</link>
      <pubDate>Thu, 20 Oct 2022 16:54:37 +0800</pubDate>
      
      <guid>https://shadow061103.github.io/posts/202210/%E9%87%9D%E5%B0%8Denum%E5%AF%ABattribute%E4%B8%A6%E5%8F%96%E5%80%BC/</guid>
      <description>針對enum寫attribute並取值 1.設定Attribute public class StringValueAttribute : Attribute{public string Value { get; private set; }public StringValueAttribute(string value){this.Value = value;}} 寫enum public enum CategoryCode{//餐飲[StringValue(&amp;#34;A&amp;#34;)]Food,//購物[StringValue(&amp;#34;B&amp;#34;)]Shopping,//美容[StringValue(&amp;#34;C&amp;#34;)]Cosmetic,//寵物[StringValue(&amp;#34;D&amp;#34;)]Pet,//生活服務[StringValue(&amp;#34;E&amp;#34;)]Life,//線上購物[StringValue(&amp;#34;F&amp;#34;)]EC,//生活繳費[StringValue(&amp;#34;G&amp;#34;)]Bill,//其他[StringValue(&amp;#34;Z&amp;#34;)]Other} 3.寫擴充方法 public static class CategoryCodeExtension{public static string GetStringValue(this CategoryCode value){var attributes = (StringValueAttribute[])value.</description>
    </item>
    
    <item>
      <title>Polly錯誤自動重試機制</title>
      <link>https://shadow061103.github.io/posts/202210/polly%E9%8C%AF%E8%AA%A4%E8%87%AA%E5%8B%95%E9%87%8D%E8%A9%A6%E6%A9%9F%E5%88%B6/</link>
      <pubDate>Thu, 20 Oct 2022 16:54:03 +0800</pubDate>
      
      <guid>https://shadow061103.github.io/posts/202210/polly%E9%8C%AF%E8%AA%A4%E8%87%AA%E5%8B%95%E9%87%8D%E8%A9%A6%E6%A9%9F%E5%88%B6/</guid>
      <description>tags: C# Polly錯誤自動重試機制 如何使用 需要先安裝nuget套件 (Polly) 主要結構 Policy.Handle&amp;lt;HttpRequestException&amp;gt;() .OrResult&amp;lt;HttpResponseMessage&amp;gt;(result =&amp;gt; result.StatusCode != HttpStatusCode.OK) .Retry(3, onRetry: (exception, retryCnt) =&amp;gt; { Console.WriteLine($&amp;#34;polly 呼叫api異常 進行第{retryCnt}次重試,error{exception.Result.StatusCode}&amp;#34;); }).Execute(DoMockRequest); Polly支援的策略 Handle&amp;lt;T&amp;gt;:故障時的處理機制，或是指定要處理什麼樣的異常,有多個的話可以用Or&amp;lt;T&amp;gt; HandleResult&amp;lt;T&amp;gt;:依據回傳內容進行故障處理，有多個可以用OrResult Retry:重試機制，定義發生故障時要重試的次數或指定工作 WaitAndRetry:可以定義間隔秒數重試 Policy.Handle&amp;lt;SomeExceptionType&amp;gt;().WaitAndRetry(5, retryAttempt =&amp;gt; TimeSpan.FromSeconds(Math.Pow(2, retryAttempt)) ); Execute:要執行的任務 Fallback (替代措施):出錯時啟用備援方案，維持營運 Circuit Breaker(熔斷):一定期間錯誤次數超過上限，即先停止執行相關動作 Timeout:超過一定時間就放棄 Bulkhead Isolation(艙倉隔離):避免出錯請求耗用過多資源拖垮整個系統，限定作業可用資源上限(主要是限制同時執行的請求數量)，隔離其對其他系統的影響 PolicyWrap:組合上述多種措施混用，彈性因應 範例 把實作方法先包成Action方法，這樣就可以比較彈性 或是直接在ExecuteAsync呼叫寫好的方法
private static async Task Main(string[] args) { var test = new Test(); Func&amp;lt;Task&amp;lt;bool&amp;gt;&amp;gt; action = async () =&amp;gt; { Random myObject = new Random(); var num = myObject.</description>
    </item>
    
    <item>
      <title>非同步程式</title>
      <link>https://shadow061103.github.io/posts/202210/%E9%9D%9E%E5%90%8C%E6%AD%A5%E7%A8%8B%E5%BC%8F/</link>
      <pubDate>Thu, 20 Oct 2022 16:53:24 +0800</pubDate>
      
      <guid>https://shadow061103.github.io/posts/202210/%E9%9D%9E%E5%90%8C%E6%AD%A5%E7%A8%8B%E5%BC%8F/</guid>
      <description>非同步程式 同步執行的問題 需要跟使用者互動的應用程式來說，如果有某項工作要花很⻑的時間才能跑完，使用者就只能在螢幕前發呆 某個應用程式進入無窮迴圈將導致其他應用程式暫停，整個作業系統看起來就像當掉 處理序 隔離應用程式的基本單位 當使用者開啟某應用程式，作業系統會將它載入記憶體並開始執行，這個載入記憶體中運行的應用程式實體（instance），便稱為處理序 會占用一個記憶體區塊，是獨立的虛擬位址空間，包含該應用程式的程式碼及相關資源，而且此空間只有該應用程式實體能夠存取 應用程式跟OS可以透過處理序分隔，但CPU沒辦法，所以要靠執行緒 執行緒 Windows 會給每一個處理序（process）配發一個專屬的執行緒（其功能近似於CPU），而當某應用程式進入無窮迴圈，其所屬之處理序形同凍結，但其他處理序（擁有各自的執行緒）並未凍結；它們都還能夠繼續運行
執行緒是Windows 作業系統用來虛擬化CPU 的概念 執行緒就是用來切割CPU的基本單位，可以同時執行多項工作 一個處理序可以同時跑多個執行緒 建一條thread要配置1MB的記憶體，包含執行緒核心物件、環境區塊（Thread Environment Block）、使用者模式堆疊、核心模式堆疊等等 Context Switch 切割並分配CPU運算時間給應用程式的各個執行緒 把CPU內部各暫存器的值保存至目前執行緒的內部資料結構 挑選下一個&amp;quot;幸運&amp;quot;的執行緒。若該執行緒屬於另一個處理序，則在切換之前，Windows 還必須切換虛擬位址空間，這樣CPU 才能存取到正確的程式碼和資料 從選中的執行緒之內部資料結構載入CPU暫存器的值 建立、摧毀、管理和切換執行緒都得額外消耗一些記憶體空間，所以沒必要不要多建額外的thread CLR 回收資源時，它會先暫停所有的執行緒，等到回收動作完成後才恢復 執行緒優先順序 優先順序分成32個等級，0-31 優先權越高愈能分到更多CPU時間 等級低的會發生starvation的情況，容易分不到資源，但是多核心的機器可以減少這種狀況 用處理序的優先順序類別跟執行緒的優先順序決定等級 處理序的優先順序 即時（RealTime） 可能會影響OS正常運作 高（High） I/O 執行時間短的才適用 高於標準（Above Normal） 標準（Normal） 低於標準（Below Normal） 閒置（Idle） var p=Process.GetCurrentProcess(); p.PriorityClass=ProcessPriorityClass.High; 執行緒的優先順序 閒置（Idle） 最低（Lowest 低於正常（Below Normal） 正常（Normal） 高於正常（Above Normal） 最高（Highest） 時間緊迫（Time-Critical） var t = new Thread(() =&amp;gt; { &amp;#34;aaa&amp;#34;.Dump();}); t.Priority=ThreadPriority.Highest; 名詞解釋 並行（concurrency）：一次處理多件工作。例如：使用者一邊輸入文字，應用程式在背後一邊執行拼字檢查 多執行緒（multithreading）：特別指以多執行緒的方式來實現並行（concurrency） 平行處理（parallel processing）：把工作切分成多個小單位，並分別交給多條執行緒來同時執行 非同步處理（asynchronous processing）：是並行（concurrency）的一種形式，但不必然（甚至會避免）使用執行緒，而是採用「承諾」（promise ）或回呼事件（callback event）的方式來達到並行的效果 非同步工作會在將來某個時間執行完畢，執行這些工作的時候不會擋住當前的執行緒，也就是說呼叫非同步工作的執行緒仍然可以繼續執行其它工作，等非同步工作完成會透過callback event/promise/ 專屬執行緒dedicated thread 直接建立一條執行緒專門執行某件工作</description>
    </item>
    
    <item>
      <title>取得.net環境變數</title>
      <link>https://shadow061103.github.io/posts/202210/%E5%8F%96%E5%BE%97.net%E7%92%B0%E5%A2%83%E8%AE%8A%E6%95%B8/</link>
      <pubDate>Thu, 20 Oct 2022 16:52:39 +0800</pubDate>
      
      <guid>https://shadow061103.github.io/posts/202210/%E5%8F%96%E5%BE%97.net%E7%92%B0%E5%A2%83%E8%AE%8A%E6%95%B8/</guid>
      <description>取得 .net 環境變數 最新版的環境變數有分兩個DOTNET_ENVIRONMENT跟ASPNETCORE_ENVIRONMENT 可以在方法注入IHostEnvironment 然後用_hostEnvironment.IsProduction()判斷 </description>
    </item>
    
    <item>
      <title>unit of work實作</title>
      <link>https://shadow061103.github.io/posts/202210/unit-of-work%E5%AF%A6%E4%BD%9C/</link>
      <pubDate>Thu, 20 Oct 2022 16:52:04 +0800</pubDate>
      
      <guid>https://shadow061103.github.io/posts/202210/unit-of-work%E5%AF%A6%E4%BD%9C/</guid>
      <description>unit of work實作 public interface IUnitOfWork : IDisposable { IDbConnection Connection { get; } IDbTransaction Transaction { get; } void BeginTransaction(); void Commit(); void RollBack(); } public class UnitOfWork : IUnitOfWork { public IDbConnection Connection { get; private set; } public IDbTransaction Transaction { get; private set; } public Guid _id = Guid.Empty; public UnitOfWork(IDbConnection connection) { _id = Guid.NewGuid(); Connection = connection; DefaultTypeMap.MatchNamesWithUnderscores = true; } public void BeginTransaction() { if (!</description>
    </item>
    
    <item>
      <title>ASP.Net Core註冊中文編碼</title>
      <link>https://shadow061103.github.io/posts/202210/asp.net-core%E8%A8%BB%E5%86%8A%E4%B8%AD%E6%96%87%E7%B7%A8%E7%A2%BC/</link>
      <pubDate>Thu, 20 Oct 2022 16:50:39 +0800</pubDate>
      
      <guid>https://shadow061103.github.io/posts/202210/asp.net-core%E8%A8%BB%E5%86%8A%E4%B8%AD%E6%96%87%E7%B7%A8%E7%A2%BC/</guid>
      <description>tags: C# ASP.Net Core 註冊中文編碼 安裝nuget套件System.Text.Encoding.CodePages 在程式內註冊 Encoding.RegisterProvider(CodePagesEncodingProvider.Instance)</description>
    </item>
    
    <item>
      <title>檔案串流彙整</title>
      <link>https://shadow061103.github.io/posts/202210/%E6%AA%94%E6%A1%88%E4%B8%B2%E6%B5%81%E5%BD%99%E6%95%B4/</link>
      <pubDate>Thu, 20 Oct 2022 16:49:58 +0800</pubDate>
      
      <guid>https://shadow061103.github.io/posts/202210/%E6%AA%94%E6%A1%88%E4%B8%B2%E6%B5%81%E5%BD%99%E6%95%B4/</guid>
      <description>檔案串流彙整 連結 https://dotblogs.com.tw/kinanson/2017/06/03/142558
開啟檔案轉成Stream private MemoryStream GetFileStream(string filePath, string fileName) { var path = Path.Combine(filePath, fileName); using var fileStream = new FileStream(path, FileMode.Open); var memoryStream = new MemoryStream(); fileStream.CopyTo(memoryStream); return memoryStream; } 讀取本地端檔案 var result=new List&amp;lt;string&amp;gt;(); var path = @&amp;#34;D:\merchantcode.txt&amp;#34;; using var reader = new StreamReader(path, Encoding.GetEncoding(950)); var content = await reader.ReadToEndAsync(); using var reader2 = new StringReader(content); string line; while ((line = reader2.ReadLine()) != null) { result.Add(line); } //result.Dump(); return result; </description>
    </item>
    
    <item>
      <title>Automapper_flattern</title>
      <link>https://shadow061103.github.io/posts/202210/automapperflattern/</link>
      <pubDate>Thu, 20 Oct 2022 16:49:14 +0800</pubDate>
      
      <guid>https://shadow061103.github.io/posts/202210/automapperflattern/</guid>
      <description>automapper flattern 可以對應到Customer 下的Name 來源沒有Total的話會用GetTotal()方法的值 void Main() { var configuration = new MapperConfiguration(cfg =&amp;gt; { cfg.CreateMap&amp;lt;Order, OrderDto&amp;gt;(); cfg.CreateMap&amp;lt;Test, Order&amp;gt;(); }); var mapper = configuration.CreateMapper(); var customer = new Customer () { Name = &amp;#34;Tom&amp;#34; }; var temp = new Test {Customer = customer,Total=80M}; var order = mapper.Map&amp;lt;Order&amp;gt;(temp); var test=mapper.Map&amp;lt;OrderDto&amp;gt;(order); test.Dump(); } public class Order { public Customer Customer { get; set; } public decimal Total{get;set;} public decimal GetTotal() { return 100M; } } public class Customer { public string Name { get; set; } } public class OrderDto { public string CustomerName { get; set; } public decimal Total { get; set; } } public class Test { public Customer Customer { get; set; } public decimal Total{get;set;} } </description>
    </item>
    
    <item>
      <title>保哥非同步課程</title>
      <link>https://shadow061103.github.io/posts/202210/%E4%BF%9D%E5%93%A5%E9%9D%9E%E5%90%8C%E6%AD%A5%E8%AA%B2%E7%A8%8B/</link>
      <pubDate>Thu, 20 Oct 2022 16:48:10 +0800</pubDate>
      
      <guid>https://shadow061103.github.io/posts/202210/%E4%BF%9D%E5%93%A5%E9%9D%9E%E5%90%8C%E6%AD%A5%E8%AA%B2%E7%A8%8B/</guid>
      <description>保哥非同步課程 thread要執行要進CPU排隊，所以不一定先start的會先跑 非同步不一定是multi thread(user thread)，File.WriteAsync 會叫dreiver去處理寫檔，完成後會告知已完成 會造成deadlock的情境 用windowform、WPF有內建syncronizecontext 宣告方法是有用async、await關鍵字 呼叫非同步方法的時候用.Result() 或wait() .Wait()跟.Result會block thread，不會還回去，只有用await才會還 沒有等待的動作，就不會有把執行緒還回去的動作 CPU bound的工作可以用Task.Run()去實作，這種方式會去thread pool拉一條新的thread,IO bound 的用async await就可以 thread pool會動態長大，如果電腦8核16的邏輯處理單元，一開始只會分配16個thread，把thread用完還會一直分配，但是用.Result會block thread，就會等到有Thread可以用的時候才會繼續往下做 .net core把HttpContext.Current刪掉了,要改成注入的方式 Task的完成狀態 IsCompleted 這個值表示工作是否已經完成執行（無論成功或失敗都叫完成） IsCompletedSuccessfully這個值表示工作是否已經完成執行（只有成功才會為true） IsCanceled這個值表示工作是否因取消才完成執行 IsFaulted這個值表示工作是否因未處理的例外狀況才完成執行 Task.Status屬性列舉 Canceled	6	工作確認取消動作，不論是因為工作在語彙基元處於信號狀態時使用自己的 CancellationToken 擲回 OperationCanceledException，或是工作的 CancellationToken 信號在工作開始執行之前便已存在。 如需詳細資訊，請參閱工作取消。 Created	0 工作已初始化但尚未排程。 Faulted	7	工作因未處理的例外狀況而完成。 RanToCompletion	5	工作已成功完成執行。 Running	3	工作正在執行，但尚未完成。 WaitingForActivation	1	工作正在等候由 .NET 基礎結構從內部啟動並排程。 WaitingForChildrenToComplete	4	工作已完成執行，而且在暗中等候附加的子工作完成。 WaitingToRun	2	工作已排定執行，但尚未開始執行。 參考 會封鎖執行緒的等候方法 沒有回傳值 MethodAsync().Wait() 封鎖並等待MethodAsync 方法執行完成 Task.</description>
    </item>
    
    <item>
      <title>CoreProfiler_效能監測工具</title>
      <link>https://shadow061103.github.io/posts/202210/coreprofiler-%E6%95%88%E8%83%BD%E7%9B%A3%E6%B8%AC%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Thu, 20 Oct 2022 16:46:25 +0800</pubDate>
      
      <guid>https://shadow061103.github.io/posts/202210/coreprofiler-%E6%95%88%E8%83%BD%E7%9B%A3%E6%B8%AC%E5%B7%A5%E5%85%B7/</guid>
      <description>CoreProfiler 效能監測工具 安裝nuget套件 CoreProfiler.Web CoreProfiler 註冊StartUp 在 Configure加上app.UseCoreProfiler(true);
加上coreprofiler.json檔案 檔案屬性要改成內容-有更新才複製
{ &amp;#34;circularBufferSize&amp;#34;: 200, &amp;#34;filters&amp;#34;: [ { &amp;#34;key&amp;#34;: &amp;#34;/coreprofiler&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;/coreprofiler&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;CoreProfiler.ProfilingFilters.NameContainsProfilingFilter, CoreProfiler&amp;#34; }, { &amp;#34;key&amp;#34;: &amp;#34;static files&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;ico,jpg,js,css,svg,json,ttf,woff,woff2,eot&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;CoreProfiler.ProfilingFilters.FileExtensionProfilingFilter, CoreProfiler&amp;#34; } ] } 如何使用 在要監看的程式包起來 var stepName = $&amp;#34;{nameof(這邊是監看的類別)}.{nameof(這邊是監看的方法)}&amp;#34;; using (ProfilingSession.Current.Step(stepName)) { } 使用attribute，需要安裝套件AspectInjector.Broker [Injection(typeof(CoreProfilerAspect))] public class CoreProfilingAttribute : System.Attribute { /// &amp;lt;summary&amp;gt; /// ProfilingName. /// &amp;lt;/summary&amp;gt; /// &amp;lt;value&amp;gt;The name of the profiling.&amp;lt;/value&amp;gt; public string ProfilingName { get; set; } /// &amp;lt;summary&amp;gt; /// ProfilingStep.</description>
    </item>
    
    <item>
      <title>EFcore模型驗證預設不檢查插入問題</title>
      <link>https://shadow061103.github.io/posts/202210/efcore%E6%A8%A1%E5%9E%8B%E9%A9%97%E8%AD%89%E9%A0%90%E8%A8%AD%E4%B8%8D%E6%AA%A2%E6%9F%A5%E6%8F%92%E5%85%A5%E5%95%8F%E9%A1%8C/</link>
      <pubDate>Thu, 20 Oct 2022 16:44:27 +0800</pubDate>
      
      <guid>https://shadow061103.github.io/posts/202210/efcore%E6%A8%A1%E5%9E%8B%E9%A9%97%E8%AD%89%E9%A0%90%E8%A8%AD%E4%B8%8D%E6%AA%A2%E6%9F%A5%E6%8F%92%E5%85%A5%E5%95%8F%E9%A1%8C/</guid>
      <description>EF core模型驗證預設不檢查插入，撈資料讀取失敗 情境 在model上的屬性設置如下
[Column(&amp;#34;bank_trade_no&amp;#34;)] [MaxLength(30)] [Required] public string BankTradeNo { get; set; } DB欄位是設定成可為null且預設Null的值
問題發生原因 問題發生在 DB有一筆資料的欄位是null，用ef core撈出來的時候報exception error stack
System.InvalidOperationException: An error occurred while reading a database value for property &amp;#39;AclinkTradeRecord.BankTradeNo&amp;#39;. The expected type was &amp;#39;System.String&amp;#39; but the actual value was null.---&amp;gt; System.InvalidCastException: Unable to cast object of type &amp;#39;System.DBNull&amp;#39; to type &amp;#39;System.String&amp;#39;.at MySqlConnector.Core.Row.GetString(Int32 ordinal) in /_/src/MySqlConnector/Core/Row.cs:line 371at MySqlConnector.MySqlDataReader.GetString(Int32 ordinal) in /_/src/MySqlConnector/MySqlDataReader.cs:line 282at lambda_method11(Closure , QueryContext , DbDataReader , ResultContext , SingleQueryResultCoordinator )--- End of inner exception stack trace ---at lambda_method11(Closure , QueryContext , DbDataReader , ResultContext , SingleQueryResultCoordinator )at Microsoft.</description>
    </item>
    
    <item>
      <title>big5難字處理</title>
      <link>https://shadow061103.github.io/posts/202210/big5%E9%9B%A3%E5%AD%97%E8%99%95%E7%90%86/</link>
      <pubDate>Tue, 18 Oct 2022 11:14:55 +0800</pubDate>
      
      <guid>https://shadow061103.github.io/posts/202210/big5%E9%9B%A3%E5%AD%97%E8%99%95%E7%90%86/</guid>
      <description>big5難字處理 判斷轉big5後是不是? public bool IsBelongHardWord(char str) { var big5 = Encoding.GetEncoding(&amp;#34;big5&amp;#34;); var cInBig5 = big5.GetString(big5.GetBytes(new[] { str })); return str != &amp;#39;?&amp;#39; &amp;amp;&amp;amp; cInBig5 == &amp;#34;?&amp;#34;; } StringInfo的解法 上面解法不適用&amp;quot;𨫎&amp;quot;、&amp;ldquo;𩗴&amp;rdquo; 這種組合字，因為會被拆成2個char Encoding.RegisterProvider(CodePagesEncodingProvider.Instance); string s = &amp;#34;𨫎𩗴嫑堃瀞abc一二三&amp;#34;; TextElementEnumerator charEnum = StringInfo.GetTextElementEnumerator(s); while (charEnum.MoveNext()) { var str = charEnum.GetTextElement(); var encode = Encoding.GetEncoding(950); var big5 = encode.GetString(encode.GetBytes(str)); ($&amp;#34;{str} 難字{str != big5}&amp;#34;).Dump(); } 參考 https://www.huanlintalk.com/2009/12/unicode-character-and-ranma-12.html</description>
    </item>
    
  </channel>
</rss>
