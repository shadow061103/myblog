<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on Steve的技術筆記</title>
    <link>https://lucumt.info/tags/docker/</link>
    <description>Recent content in docker on Steve的技術筆記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Thu, 27 Oct 2022 17:09:09 +0800</lastBuildDate><atom:link href="https://lucumt.info/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker建立Mysql資料庫</title>
      <link>https://lucumt.info/posts/202210/docker%E5%BB%BA%E7%AB%8Bmysql%E8%B3%87%E6%96%99%E5%BA%AB/</link>
      <pubDate>Thu, 27 Oct 2022 17:09:09 +0800</pubDate>
      
      <guid>https://lucumt.info/posts/202210/docker%E5%BB%BA%E7%AB%8Bmysql%E8%B3%87%E6%96%99%E5%BA%AB/</guid>
      <description>docker建立container 1.docker pull mysql:8 2.docker run &amp;ndash;name mysql_test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:8 3.可以用mysql workbench登入 127.0.0.1:3306
下指令進入mysql client 1.docker exec -it bash 進入互動模式 2.mysql -h localhost -u root -p 進入client 就可以下指令
https://hub.docker.com/_/mysql
練習 [面試][資料庫]關聯式資料庫要如何設計避免超賣？</description>
    </item>
    
    <item>
      <title>docker container操作</title>
      <link>https://lucumt.info/posts/202210/docker-container%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 24 Oct 2022 15:45:01 +0800</pubDate>
      
      <guid>https://lucumt.info/posts/202210/docker-container%E6%93%8D%E4%BD%9C/</guid>
      <description>進container改檔案 方法一 1.docker exec -it bash 2.apt-get update 3.apt-get install vim 4.vim &amp;lt;檔名&amp;gt; 5.用insert模式修改，完成後Esc + :wq
方法二 1.docker exec -it bash 看配置跟檔案位置 2.docker cp :&amp;lt;file path+file name&amp;gt; 3.改完檔案內容之後複製回去 docker cp &amp;lt;host file path +file name&amp;gt; :
刪除container docker container rm [hash]
刪除image docker image rm [hash]
https://blog.clarence.tw/2019/09/10/docker-removing-containers-images-volumes-and-networks/</description>
    </item>
    
    <item>
      <title>Dockerfile</title>
      <link>https://lucumt.info/posts/202210/dockerfile/</link>
      <pubDate>Mon, 24 Oct 2022 15:42:59 +0800</pubDate>
      
      <guid>https://lucumt.info/posts/202210/dockerfile/</guid>
      <description>介紹 #開頭的是註解 指令分成指令名稱，然後是args instruction arguments # key=value的是設定參數 docker build ~/path可以建image，後面是指定檔案目錄(不是file檔路徑)，目錄底下要有Dockerfile 可以用-t指定名稱跟tag(跟建container一樣) 如果名稱不是Dockerfile可以用-f指定檔案名稱 docker build -t mytag . 後面有.表示用這個資料夾的檔案 基礎指令 FROM 指定建置的image是基於哪個image而來 格式 FROM &amp;lt;image&amp;gt; FROM &amp;lt;image&amp;gt;:&amp;lt;tag&amp;gt; FROM &amp;lt;image&amp;gt;@&amp;lt;digest&amp;gt; tag跟digest都是optional的，沒填就用latest FROM &amp;lt;image&amp;gt; as &amp;lt;name&amp;gt;這個name可以自訂 之後用COPY --from指定 MAINTAINER 提供工作者資訊 MAINTAINER &amp;lt;name&amp;gt; 控制指令 RUN RUN command para1 para2是用shell程式執行指令，可以支援換列, 實際上是用/bin/sh執行 如果指令一樣但結果不同，docker會用快取的結果，所以可以指定--no-cache解決 建構映像的過程中執行，並把結果提交到新的映像層中 RUN command para1 para2... //比較好 RUN [&amp;#34;executable&amp;#34;,&amp;#34;para1&amp;#34;,&amp;#34;para2&amp;#34;,...] WORKDIR 用來切換工作目錄，可以是相對或絕對路徑 允許使用環境變數 WORKDIR /usr WORKDIR local 用相對路徑會參考目前工作目錄去切換 ONBUILD 可以攜帶另一個指令，但不會在建構目前映像的時候執行 而是在建構其他映像，並透過FROM把目前映像當作基礎映像的時候執行 可以用docker inspect查看有哪些指令 引入指令 ADD 可以把source code或設定檔之類的東西匯入 可以用go的萬用字元比對規格指定多個檔案ADD hom* /dir/ src只能用相對路徑，而且是相對於dockerfile的路徑，不能往上層找(就是只能找dockerfile下的檔案) dest可以是相對或絕對路徑， src可以放網址下載外部網路的內容 ADD &amp;lt;src&amp;gt;.</description>
    </item>
    
    <item>
      <title>docker管理工具</title>
      <link>https://lucumt.info/posts/202210/docker%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Mon, 24 Oct 2022 15:42:34 +0800</pubDate>
      
      <guid>https://lucumt.info/posts/202210/docker%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</guid>
      <description>docker compose 組態預設放在docker-compose.yml檔案，也可以自訂檔名 windows或MacOS已經內建安裝，用docker-compose version查看 其他OS要安裝需要去github抓檔案下來裝 Docker compose是用yaml格式，可以上網找怎麼寫 範例 可以看kevin寫的docker-compose.yaml
文件規格 services:代表所有組成專案的服務容器與配置 image或build:代表容器用的基礎映像，build是用dockerfile產生的，值是dockerfile的目錄 volume:跟-v用法一樣，但是可以指定相對於檔案的目錄 environment:指定環境變數 ports:指定連接port，最好用雙引號 links:容器間的連接 指令 docker-compose build 建構專案映像 &amp;ndash;pull:總是拉最新的image &amp;ndash;firce-rm:刪除基於原有映像的容器 &amp;ndash;no-cache:不使用快取 docker-compose create 建立專案容器 &amp;ndash;force-create:重新建立已存在於docker的容器 &amp;ndash;build:建構容器所需的映像 docker-compose start 啟動所有容器 docker-compose start nginx php mysql 指定要啟動的服務 docker-compose up docker-compose down組合執行 docker-compose stop停止專案 docker-compose rm刪除專案 docker-compose logs &amp;lt;service&amp;gt;取得服務日誌 </description>
    </item>
    
    <item>
      <title>Docker api</title>
      <link>https://lucumt.info/posts/202210/docker-api/</link>
      <pubDate>Mon, 24 Oct 2022 15:41:56 +0800</pubDate>
      
      <guid>https://lucumt.info/posts/202210/docker-api/</guid>
      <description> 是restful的
docker remote api:用來操作映像或容器 docker registry api:管理遠端映像倉庫 docker cloud api:操作docker雲端服務 Docker Remote API 取得docker運行宿主機環境介面 sudo curl --unix-socket /var/run/docker.sock http://localhost/info 遠端打的話可以用 api用法 前面網址是基底 sudo curl http://host:port/info 列出容器 GET /containers/json 列出inages GET /images/json docker registry api 取得image資訊 Get /v2/[name]/manifests/[references] pull image GET /v2/[name]/blobs/[digest] 推送映像 先判斷registry已經準備好 POSt /v2/[name]/blobs/uploads </description>
    </item>
    
    <item>
      <title>docker的安全性</title>
      <link>https://lucumt.info/posts/202210/docker%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7/</link>
      <pubDate>Mon, 24 Oct 2022 15:41:29 +0800</pubDate>
      
      <guid>https://lucumt.info/posts/202210/docker%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7/</guid>
      <description>資源控制群組CGroup 可以限制資源:分配電腦資源 優先化: 用量報告:取得控制群組分配資源的統計資訊 核心能力機制 權限檢查 復原更改 資源使用限制 限制分配的最大記憶體 限制實體記憶體 -m --memory 限制總記憶體 --memory-swap 限制CPU 透過權重分配 -c --cpu-shares --cpu-period --cpu-quota 狀態監控 docker ps 看資源占有情況 --no-stream是只看當下的 docker stats --no-stream [name] docker logs </description>
    </item>
    
    <item>
      <title>docker的網路(II)</title>
      <link>https://lucumt.info/posts/202210/docker%E7%9A%84%E7%B6%B2%E8%B7%AFii/</link>
      <pubDate>Mon, 24 Oct 2022 15:40:50 +0800</pubDate>
      
      <guid>https://lucumt.info/posts/202210/docker%E7%9A%84%E7%B6%B2%E8%B7%AFii/</guid>
      <description>基於Linux的network container裡面的Network Nampspaces 透過Veth pair(Virtual Ethernet Pair)虛擬網路通道出去 docker利用bridge連接到宿主機的橋接器 就可以跟其他container通訊 主要組成 Network Nampspaces:實現網路的隔離 Veth Pair:打穿隔離環境的網路傳輸資料通道 Linux Bridge:網路交換機，宿主機的橋接器 Iptables:提供網路資料穿透與NAT等功能 容器網路模型CNM 實作Libnetwork，實作上面那些東西
Sandbox:容器中隔離網路配置的虛擬環境，有獨立的網路組態等資訊，類似Network Nampspace Endpoint:傳遞網路資料的通道入口，類似Veth Pair Network:由一組端點組成，同一個網路的端點可以互相通訊 預設網路 docker network ls可以顯示所有網路清單，首次啟用會有3個預設網路 bridge是容器預設的網路，會對應到docker0 想改變容器網路可以在run的時候用--network修改 host是使用宿主機的網卡 docker network inspect bridge可以查看相關資訊 PS C:\Users\KuanFu&amp;gt; docker network ls NETWORK ID NAME DRIVER SCOPE 0d96b30c3fca bridge bridge local 8f72209b8925 host host local 76e669bab0e6 none null local 自訂網路跟相關指令 想要讓幾個特定容器互相溝通，而不是所有容器都用bridge互相存取
建立網路 docker network create 預設會使用bridge 可以用&amp;ndash;subnet 建一個有子網範圍的容器網路 //create一個網路 --driver可以簡化-d docker network create --driver bridge isolated docker network create --subnet 10.</description>
    </item>
    
    <item>
      <title>docker的資料卷Data Volume</title>
      <link>https://lucumt.info/posts/202210/docker%E7%9A%84%E8%B3%87%E6%96%99%E5%8D%B7data-volume/</link>
      <pubDate>Mon, 24 Oct 2022 15:40:10 +0800</pubDate>
      
      <guid>https://lucumt.info/posts/202210/docker%E7%9A%84%E8%B3%87%E6%96%99%E5%8D%B7data-volume/</guid>
      <description>保存檔案資料的模組
容器內的檔案環境是在一個臨時層上，容器停止或刪除時，檔案就不見了 資料卷是掛載在容器內檔案系統的檔案或目錄，可以永久保存 不依賴於容器，所以容器可以共用 指令 對資料卷指定名稱，不然就要用hash才能取得 docker volume create --name html 掛載volume在容器 docker create --name web -v /html -v /var/log/nginx nginx -v [name]:[dest] : name是資料卷名稱 dest是目錄 也可以把server的目錄當作資料卷掛到容器上，用 -v [src]:[dest] 後面加:ro可以變唯讀檔案 範例是掛2個volume 檢查 docker volume inspect html [ { &amp;#34;CreatedAt&amp;#34;: &amp;#34;2021-11-30T15:10:52Z&amp;#34;, &amp;#34;Driver&amp;#34;: &amp;#34;local&amp;#34;, &amp;#34;Labels&amp;#34;: {}, &amp;#34;Mountpoint&amp;#34;: &amp;#34;/var/lib/docker/volumes/html/_data&amp;#34;, &amp;#34;Name&amp;#34;: &amp;#34;html&amp;#34;, &amp;#34;Options&amp;#34;: {}, &amp;#34;Scope&amp;#34;: &amp;#34;local&amp;#34; } ] 查看所有的 docker volume list 刪除資料卷(沒被任何容器使用時才會刪) docker volume rm [hash] 或是隨容器刪除 docker rm -v web 資料卷容器 用來管理資料卷，是其他容器的橋樑 不用處在運行狀態也可以用 其他容器只是透過資料卷容器取得的資料卷資訊 docker create --name data -v /html ubuntu docker inspect data //掛載指定資料卷的所有資料卷 docker run -d --name web --volumes-from data nginx &amp;ndash;volumes-from指定要掛哪一個 同一個資料卷容器內的檔案會共享 要匯出資料卷 先建立一個新的container 用&amp;ndash;volumes-from指定資料捲容器 -v指定本地端檔案 建立之後把包成tar檔 關閉container Docker筆記 - 讓資料遠離Container，使用 Volume、Bind Mount 與 Tmpfs Mount</description>
    </item>
    
    <item>
      <title>SSH服務</title>
      <link>https://lucumt.info/posts/202210/ssh%E6%9C%8D%E5%8B%99/</link>
      <pubDate>Mon, 24 Oct 2022 15:39:33 +0800</pubDate>
      
      <guid>https://lucumt.info/posts/202210/ssh%E6%9C%8D%E5%8B%99/</guid>
      <description>遠端操作主機的方式，docker也可以用ssh連接和存取內部容器
Linux下安裝OpenSSH 定義在應用層和傳輸層的安全協定 相較於FTP,Telnet更安全 Linux安裝SSH sudo apt-get purge openssh-server sudo apt-get install openssh-server sudo service sshd start sudo service ssh status /lib/systemd/systemd-sysv-install enable ssh 預設會裝到/usr/sbin下 啟動方式是守護狀態 要用-D轉到前台運行 sudo /usr/sbin/sshd -D 啟動程式後會監聽port 22，就可以接收用戶端請求了 windows用戶端程式是PuTTY
指令 登入 ssh user@host -p可以指定port ssh host 不指定登入使用者 應用情境 把一些設定檔放在資料卷容器 然後起一個SSH的容器去操作這個資料卷容器
docker create --name config -v /etc/nginx alpine echo Nginx Configuration docker create --name code -v /var/web alpine echo Root docker create --name web --volumes-from code --volumes-from config -p 80:80 -p 443:443 nginx:1.</description>
    </item>
    
    <item>
      <title>docker安裝Web server</title>
      <link>https://lucumt.info/posts/202210/docker%E5%AE%89%E8%A3%9Dweb-server/</link>
      <pubDate>Mon, 24 Oct 2022 15:37:57 +0800</pubDate>
      
      <guid>https://lucumt.info/posts/202210/docker%E5%AE%89%E8%A3%9Dweb-server/</guid>
      <description>Apache 下指令 docker run -it --name apache ubuntu:16.04 /bin/bash #apt-get update &amp;amp;&amp;amp; apt-get -y install apache2 &amp;amp;&amp;amp; apt-get clean //開啟TLS安全加密模組 #a2ensite default-ssl # service apache2 reload #a2enmod ssl docker commit -m &amp;#39;apache server&amp;#39; apache kuan/apache docker run -d -p 1002:80 kuan/apache /usr/sbin/apache2ctl -D FOREGROUND Dockerfile FROM ubuntu:16.04 MAINTAINER kuan &amp;lt;shadow061103@gmail.com&amp;gt; RUN apt-get update &amp;amp;&amp;amp; apt-get -y install apache2 &amp;amp;&amp;amp; apt-get clean RUN /usr/sbin/a2ensite default-ssl RUN /usr/sbin/a2enmod ssl EXPOSE 80 EXPOSE 443 CMD [&amp;#34;/usr/sbin/apache2ctl&amp;#34;,&amp;#34;-D&amp;#34;,&amp;#34;FOREGROUND&amp;#34;] docker build -t kuan/apache .</description>
    </item>
    
    <item>
      <title>docker-compose.yml範例</title>
      <link>https://lucumt.info/posts/202210/docker-compose.yml%E7%AF%84%E4%BE%8B/</link>
      <pubDate>Mon, 24 Oct 2022 15:37:25 +0800</pubDate>
      
      <guid>https://lucumt.info/posts/202210/docker-compose.yml%E7%AF%84%E4%BE%8B/</guid>
      <description>docker-compose.yml version: &amp;#34;3.2&amp;#34; services: elasticsearch: image: elasticsearch:7.10.1 container_name: elasticsearch-local ports: - &amp;#34;9200:9200&amp;#34; - &amp;#34;9300:9300&amp;#34; environment: - cluster.name=docker-cluster - bootstrap.memory_lock=true - http.host=0.0.0.0 - http.port=9200 - transport.host=127.0.0.1 - &amp;#34;ES_JAVA_OPTS=-Xms512m -Xmx512m&amp;#34; - &amp;#34;http.cors.allow-origin=http://127.0.0.1:1358&amp;#34; - &amp;#34;http.cors.enabled=true&amp;#34; - &amp;#34;http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization&amp;#34; - &amp;#34;http.cors.allow-credentials=true&amp;#34; ulimits: memlock: soft: -1 hard: -1 volumes: - es_data:/usr/share/elasticsearch/data networks: - esnet kibana: image: kibana:7.10.1 container_name: kibana-local environment: SERVER_NAME: kibana-server ELASTICSEARCH_URL: http://elasticsearch:9200 networks: - esnet depends_on: - elasticsearch ports: - &amp;#34;5601:5601&amp;#34; cerebro: image: yannart/cerebro:latest container_name: cerebro-073 networks: - esnet ports: - &amp;#34;9900:9000&amp;#34; depends_on: - elasticsearch dejavu: image: appbaseio/dejavu:latest container_name: dejavu networks: - esnet ports: - &amp;#34;1358:1358&amp;#34; volumes: es_data: driver: local networks: esnet: driver: bridge </description>
    </item>
    
    <item>
      <title>docker 安裝ping套件&amp;proxy</title>
      <link>https://lucumt.info/posts/202210/docker-%E5%AE%89%E8%A3%9Dping%E5%A5%97%E4%BB%B6proxy/</link>
      <pubDate>Mon, 24 Oct 2022 15:36:51 +0800</pubDate>
      
      <guid>https://lucumt.info/posts/202210/docker-%E5%AE%89%E8%A3%9Dping%E5%A5%97%E4%BB%B6proxy/</guid>
      <description>安裝套件 apt-get update apt-get install -y iputils-ping
設定proxy export http_proxy=http://secproxy.evertrust.com.tw:6588 &amp;amp;&amp;amp; export https_proxy=https://secproxy.evertrust.com.tw:6588</description>
    </item>
    
    <item>
      <title>docker的網路</title>
      <link>https://lucumt.info/posts/202210/docker%E7%9A%84%E7%B6%B2%E8%B7%AF/</link>
      <pubDate>Mon, 24 Oct 2022 15:36:11 +0800</pubDate>
      
      <guid>https://lucumt.info/posts/202210/docker%E7%9A%84%E7%B6%B2%E8%B7%AF/</guid>
      <description>介紹 透過Network Namespace虛擬出網路環境，提供獨立的網路設備、IP協定堆疊、IP路由表、防火牆 docker啟動時會在宿主機架一個docker0的虛擬網路，連接宿主機跟容器(用Weth pair) 這個是僅限於容器跟宿主機溝通，不對外 查網路設定 inspect的NetworkSettings docker inspect [name] port映射 容器可以透過預設的docker0連接到外網，但是外網不能連到容器，因為可能同時好幾個容器在使用docker0 建立容器的時候加上-P，會在宿主機隨機找可用的port，再綁定到容器的port上 -p是指定特定的port 前面是宿主機的port後面是docker的port docker run -p &amp;lt;hport&amp;gt;:&amp;lt;cport&amp;gt; -p可以設定多個 可以限制特定IP -p &amp;lt;ip&amp;gt;:&amp;lt;hport&amp;gt;:&amp;lt;cport&amp;gt; 容器間通訊 建立容器時加上&amp;ndash;link參數 指定container --link [container name] 連接其他容器時不使用IP，而是直接指定容器名稱 docker run -d -p 80:80 -p 443:443 --name web --link redis-lab nginx 可以用環境變數檢查 docker exec -it web /bin/bash root@e4e93bef390b:/# env HOSTNAME=e4e93bef390b PWD=/ REDIS_LAB_PORT_6379_TCP=tcp://172.17.0.3:6379 REDIS_LAB_PORT=tcp://172.17.0.3:6379 PKG_RELEASE=1~bullseye HOME=/root REDIS_LAB_ENV_REDIS_VERSION=6.2.6 REDIS_LAB_PORT_6379_TCP_PROTO=tcp REDIS_LAB_NAME=/web/redis-lab NJS_VERSION=0.7.0 TERM=xterm REDIS_LAB_ENV_GOSU_VERSION=1.12 REDIS_LAB_PORT_6379_TCP_ADDR=172.17.0.3 SHLVL=1 REDIS_LAB_ENV_REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-6.2.6.tar.gz PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin REDIS_LAB_PORT_6379_TCP_PORT=6379 NGINX_VERSION=1.21.4 REDIS_LAB_ENV_REDIS_DOWNLOAD_SHA=5b2b8b7a50111ef395bf1c1d5be11e6e167ac018125055daa8b5c2317ae131ab _=/usr/bin/env </description>
    </item>
    
    <item>
      <title>Docker image</title>
      <link>https://lucumt.info/posts/202210/docker-image/</link>
      <pubDate>Mon, 24 Oct 2022 15:35:38 +0800</pubDate>
      
      <guid>https://lucumt.info/posts/202210/docker-image/</guid>
      <description>指令 把image拉到本地端 sudo docker pull 查看image的詳細資訊 sudo docker inspect [image name|image id] 刪除docker image sudo docker rmi [image name] -f可以強制刪除 匯出image變成檔案 sudo docker save -o ubuntu.tar ubuntu:latest sudo docker save ubuntu:latest &amp;gt; ubuntu.tar 匯入檔案變成image sudo docker load -i ubuntu.tar sudo docker load &amp;lt; ubuntu.tar 建立容器 sudo docker run debian:jessie 執行容器 sudo docker run debian:jessie -i或-interative 互動模式 -t或-tty 開啟偽終端機 -d後臺執行 不能跟-i一起用 查看處理序狀態 比較像linux的ps用法 docker top [container] 查看容器資訊 docker inspect [container] 可以用-f 過濾資訊 容器日誌 docker run -d --name log_demo ubuntu /bin/bash -c &amp;#39;for((i=0;1;i++)); do echo &amp;#34;time $i&amp;#34;; sleep 1;done;&amp;#39; docker logs log_demo 只輸出最後幾行 docker logs --tail 5 log_demo 限定時間 docker logs --since 2021-11-21T05:56:38 log_demo 附加到容器，就是切換成前台運行模式(依附在主處理序)，但是退出也會讓容器一起停止 docker attach [name] 容器中執行命令 docker exec [name] 提交容器更改 docker commit [hash]可以產生新的image 匯出容器 docker export -o [name].</description>
    </item>
    
    <item>
      <title>Docker介紹</title>
      <link>https://lucumt.info/posts/202210/docker%E4%BB%8B%E7%B4%B9/</link>
      <pubDate>Mon, 24 Oct 2022 15:34:48 +0800</pubDate>
      
      <guid>https://lucumt.info/posts/202210/docker%E4%BB%8B%E7%B4%B9/</guid>
      <description>底層實作 使用 Linux Kernel的 Namespace: 和 Cgroup 組合而成
Namespace:作環境隔離使用的，像是把Process ID、User ID、Network…等等的環境執行狀態隔離開來 Cgroup:用來做系統資源的管理，如：CPU、Memory、I/O…等等，資源做有效的隔離和做使用上的限制 系統架構 client-server的架構，client部分稱為docker client，server的部分稱為docker daemon
Docker Daemon：用來執行管理Docker image、啟動 container、停止 container的service，有提供 Restful API 給使用者做操作或是顯示一些 Docker container 的狀態訊息 Docker Client:使用 Restful API 連到 Docker daemon，並且提供 command line 的方式讓使用者可以操作 docker 常用名詞 docker image:啟動docker container要使用的擋案，是一個唯讀映像檔，可以像積木一樣一層一層堆起來 可以從Docker Hubpull下來 從另外一台電腦上的 Docker image export 出來，然後import到自已的電腦 寫dockerfile Docker Container:透過 Docker image 執行起來的 Process，同一個 Docker image 可以啟動多個 Docker Container，container之間的環境是隔離開來的 Docker Hub:存放 Docker image的倉庫，內部環境架的私有docker hub叫Docker Registry 小練習
指令介紹 docker search:搜尋有哪些image is-official=true:找官方的image docker pull [imagename]:把image下載到本地端 docker images:檢查現有的image docker run -it [imagename]:執行container /bin/bash:可以進入terminal 輸入exit可以離開(會停止container)，ctrl + p+ctrl + q不會把container關閉 docker ps :查看現有的container -a:包含停止的 docker exec -it [containerid] /bin/bash進入terminal模式 Dockerfile 不需要進container安裝程式和設定檔，只要docker build就可以建docker image，之後要用就只要docker run</description>
    </item>
    
  </channel>
</rss>
